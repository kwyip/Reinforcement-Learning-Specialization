{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "3d7e0bf7bf37a14b2f4cc8896af5d808",
     "grade": false,
     "grade_id": "cell-c9904c1c46f57746",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "# Assignment 1: Bandits and Exploration/Exploitation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "c8f4f6a23a8695f62a4e02738e204550",
     "grade": false,
     "grade_id": "cell-6ef89310dd46c266",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "Welcome to Assignment 1. This notebook will:\n",
    "- Help you create your first bandit algorithm\n",
    "- Help you understand the effect of epsilon on exploration and learn about the exploration/exploitation tradeoff\n",
    "- Introduce you to some of the reinforcement learning software we are going to use for this specialization\n",
    "\n",
    "This class uses RL-Glue to implement most of our experiments. It was originally designed by Adam White, Brian Tanner, and Rich Sutton. This library will give you a solid framework to understand how reinforcement learning experiments work and how to run your own. If it feels a little confusing at first, don't worry - we are going to walk you through it slowly and introduce you to more and more parts as you progress through the specialization.\n",
    "\n",
    "We are assuming that you have used a Jupyter notebook before. But if not, it is quite simple. Simply press the run button, or shift+enter to run each of the cells. The places in the code that you need to fill in will be clearly marked for you."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "237637aecdf568d891f923f2da93ed0e",
     "grade": false,
     "grade_id": "cell-2ebeb8b32ec50907",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "## Section 0: Preliminaries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "fbe36b78ea23f980c0fec58209d0f136",
     "grade": false,
     "grade_id": "cell-b1f350f6be960eea",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "# Import necessary libraries\n",
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from tqdm import tqdm\n",
    "import time\n",
    "\n",
    "from rlglue.rl_glue import RLGlue\n",
    "import main_agent\n",
    "import ten_arm_env\n",
    "import test_env"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "436c6c3ef60210f1cd4648f43ca5b388",
     "grade": false,
     "grade_id": "cell-e2a306e4cfd3e433",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "In the above cell, we import the libraries we need for this assignment. We use numpy throughout the course and occasionally provide hints for which methods to use in numpy. Other than that we mostly use vanilla python and the occasional other library, such as matplotlib for making plots.\n",
    "\n",
    "You might have noticed that we import ten_arm_env. This is the __10-armed Testbed__ introduced in [section 2.3](http://www.incompleteideas.net/book/RLbook2018.pdf) of the textbook. We use this throughout this notebook to test our bandit agents. It has 10 arms, which are the actions the agent can take. Pulling an arm generates a stochastic reward from a Gaussian distribution with unit-variance. For each action, the expected value of that action is randomly sampled from a normal distribution, at the start of each run. If you are unfamiliar with the 10-armed Testbed please review it in the textbook before continuing.\n",
    "\n",
    "__DO NOT IMPORT OTHER LIBRARIES as this will break the autograder.__\n",
    "\n",
    "__DO NOT SET A RANDOM SEED as this will break the autograder.__\n",
    "\n",
    "Please **do not** duplicate cells. This will put your notebook into a bad state and break Cousera's autograder.\n",
    "\n",
    "Before you submit, please click \"Kernel\" -> \"Restart and Run All\" and make sure all cells pass."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "6dfc1a07738ba7ef428ad0d6045b194d",
     "grade": false,
     "grade_id": "cell-753cb03c956b611e",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "## Section 1: Greedy Agent"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "26fc8f97320909c8ac7e8c66f5b73fca",
     "grade": false,
     "grade_id": "cell-8e7576e85bbe82fc",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "We want to create an agent that will find the action with the highest expected reward. One way an agent could operate is to always choose the action with  the highest value based on the agentâ€™s current estimates. This is called a greedy agent as it greedily chooses the action that it thinks has the highest value. Let's look at what happens in this case.\n",
    "\n",
    "First we are going to implement the argmax function, which takes in a list of action values and returns an action with the highest value. Why are we implementing our own instead of using the argmax function that numpy uses? Numpy's argmax function returns the first instance of the highest value. We do not want that to happen as it biases the agent to choose a specific action in the case of ties. Instead we want to break ties between the highest values randomly. So we are going to implement our own argmax function. You may want to look at [np.random.choice](https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.choice.html) to randomly select from a list of values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "7891047f2d6f4137ad3a82d2a4390c88",
     "grade": false,
     "grade_id": "cell-00a70af9534c45cb",
     "locked": false,
     "schema_version": 3,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "# -----------\n",
    "# Graded Cell\n",
    "# -----------\n",
    "def argmax(q_values):\n",
    "    \"\"\"\n",
    "    Takes in a list of q_values and returns the index of the item \n",
    "    with the highest value. Breaks ties randomly.\n",
    "    returns: int - the index of the highest value in q_values\n",
    "    \"\"\"\n",
    "    top_value = float(\"-inf\")\n",
    "    ties = []\n",
    "    \n",
    "    for i in range(len(q_values)):\n",
    "        # if a value in q_values is greater than the highest value update top and reset ties to zero\n",
    "        # if a value is equal to top value add the index to ties\n",
    "        # return a random selection from ties.\n",
    "        # YOUR CODE HERE\n",
    "        if top_value < q_values[i]:\n",
    "            top_value = q_values[i]\n",
    "            ties = []\n",
    "            ties.append(i)\n",
    "        elif top_value == q_values[i]:\n",
    "            ties.append(i)\n",
    "    return np.random.choice(ties)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# --------------\n",
    "# Debugging Cell\n",
    "# --------------\n",
    "# Feel free to make any changes to this cell to debug your code\n",
    "\n",
    "test_array = [0, 0, 0, 0, 0, 0, 0, 0, 1, 0]\n",
    "assert argmax(test_array) == 8, \"Check your argmax implementation returns the index of the largest value\"\n",
    "\n",
    "# make sure np.random.choice is called correctly\n",
    "np.random.seed(0)\n",
    "test_array = [1, 0, 0, 1]\n",
    "\n",
    "assert argmax(test_array) == 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "478af144d962fce153fc39829fe2b80e",
     "grade": true,
     "grade_id": "cell-f227246db2235e96",
     "locked": true,
     "points": 10,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "# -----------\n",
    "# Tested Cell\n",
    "# -----------\n",
    "# The contents of the cell will be tested by the autograder.\n",
    "# If they do not pass here, they will not pass there.\n",
    "\n",
    "test_array = [0, 0, 0, 0, 0, 0, 0, 0, 1, 0]\n",
    "assert argmax(test_array) == 8, \"Check your argmax implementation returns the index of the largest value\"\n",
    "\n",
    "# set random seed so results are deterministic\n",
    "np.random.seed(0)\n",
    "test_array = [1, 0, 0, 1]\n",
    "\n",
    "counts = [0, 0, 0, 0]\n",
    "for _ in range(100):\n",
    "    a = argmax(test_array)\n",
    "    counts[a] += 1\n",
    "\n",
    "# make sure argmax does not always choose first entry\n",
    "assert counts[0] != 100, \"Make sure your argmax implementation randomly choooses among the largest values.\"\n",
    "\n",
    "# make sure argmax does not always choose last entry\n",
    "assert counts[3] != 100, \"Make sure your argmax implementation randomly choooses among the largest values.\"\n",
    "\n",
    "# make sure the random number generator is called exactly once whenver `argmax` is called\n",
    "expected = [44, 0, 0, 56] # <-- notice not perfectly uniform due to randomness\n",
    "assert counts == expected"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "60f1a63e2e8eadfa949c0c7e5641c6c3",
     "grade": false,
     "grade_id": "cell-80dca165281ba2f3",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "Now we introduce the first part of an RL-Glue agent that you will implement. Here we are going to create a GreedyAgent and implement the agent_step method. This method gets called each time the agent takes a step. The method has to return the action selected by the agent. This method also ensures the agentâ€™s estimates are updated based on the signals it gets from the environment.\n",
    "\n",
    "Fill in the code below to implement a greedy agent."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "a6f8d5ef9b1437998b78c7e73ec75ac1",
     "grade": false,
     "grade_id": "cell-582d9e7f86d07eb6",
     "locked": false,
     "schema_version": 3,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "# -----------\n",
    "# Graded Cell\n",
    "# -----------\n",
    "class GreedyAgent(main_agent.Agent):\n",
    "    def agent_step(self, reward, observation=None):\n",
    "        \"\"\"\n",
    "        Takes one step for the agent. It takes in a reward and observation and \n",
    "        returns the action the agent chooses at that time step.\n",
    "        \n",
    "        Arguments:\n",
    "        reward -- float, the reward the agent recieved from the environment after taking the last action.\n",
    "        observation -- float, the observed state the agent is in. Do not worry about this as you will not use it\n",
    "                              until future lessons\n",
    "        Returns:\n",
    "        current_action -- int, the action chosen by the agent at the current time step.\n",
    "        \"\"\"\n",
    "        ### Useful Class Variables ###\n",
    "        # self.q_values : An array with what the agent believes each of the values of the arm are.\n",
    "        # self.arm_count : An array with a count of the number of times each arm has been pulled.\n",
    "        # self.last_action : The action that the agent took on the previous time step\n",
    "        #######################\n",
    "        \n",
    "        # Update Q values Hint: Look at the algorithm in section 2.4 of the textbook.\n",
    "        # increment the counter in self.arm_count for the action from the previous time step\n",
    "        # update the step size using self.arm_count\n",
    "        # update self.q_values for the action from the previous time step\n",
    "        \n",
    "        # YOUR CODE HERE\n",
    "        self.arm_count[self.last_action] += 1\n",
    "        self.q_values[self.last_action] += (reward - self.q_values[self.last_action]) / self.arm_count[self.last_action]\n",
    "        \n",
    "        # current action = ? # Use the argmax function you created above\n",
    "        # YOUR CODE HERE\n",
    "        current_action = argmax(self.q_values)\n",
    "    \n",
    "        self.last_action = current_action\n",
    "        \n",
    "        return current_action\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# --------------\n",
    "# Debugging Cell\n",
    "# --------------\n",
    "# Feel free to make any changes to this cell to debug your code\n",
    "\n",
    "# build a fake agent for testing and set some initial conditions\n",
    "np.random.seed(1)\n",
    "greedy_agent = GreedyAgent()\n",
    "greedy_agent.q_values = [0, 0, 0.5, 0, 0]\n",
    "greedy_agent.arm_count = [0, 1, 0, 0, 0]\n",
    "greedy_agent.last_action = 1\n",
    "\n",
    "action = greedy_agent.agent_step(reward=1)\n",
    "\n",
    "# make sure the q_values were updated correctly\n",
    "assert greedy_agent.q_values == [0, 0.5, 0.5, 0, 0]\n",
    "\n",
    "# make sure the agent is using the argmax that breaks ties randomly\n",
    "assert action == 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "f89f286dbc67c32c059b5029486e12db",
     "grade": true,
     "grade_id": "cell-1fa8c96db39d0117",
     "locked": true,
     "points": 10,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# -----------\n",
    "# Tested Cell\n",
    "# -----------\n",
    "# The contents of the cell will be tested by the autograder.\n",
    "# If they do not pass here, they will not pass there.\n",
    "\n",
    "# build a fake agent for testing and set some initial conditions\n",
    "np.random.seed(1)\n",
    "greedy_agent = GreedyAgent()\n",
    "greedy_agent.q_values = [0, 0, 1.0, 0, 0]\n",
    "greedy_agent.arm_count = [0, 1, 0, 0, 0]\n",
    "greedy_agent.last_action = 1\n",
    "\n",
    "# take a fake agent step\n",
    "action = greedy_agent.agent_step(reward=1)\n",
    "\n",
    "# make sure agent took greedy action\n",
    "assert action == 2\n",
    "\n",
    "# make sure q_values were updated correctly\n",
    "assert greedy_agent.q_values == [0, 0.5, 1.0, 0, 0]\n",
    "\n",
    "# take another step\n",
    "action = greedy_agent.agent_step(reward=2)\n",
    "assert action == 2\n",
    "assert greedy_agent.q_values == [0, 0.5, 2.0, 0, 0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "90a42fd6968847f33177fb88b0154707",
     "grade": false,
     "grade_id": "cell-0edf7d5d440cdc40",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "Let's visualize the result. Here we run an experiment using RL-Glue to test our agent. For now, we will set up the experiment code; in future lessons, we will walk you through running experiments so that you can create your own."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "085d0577b0263d3f40d731383d9ad2a4",
     "grade": false,
     "grade_id": "cell-13bf4a5ec5402a22",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 200/200 [00:02<00:00, 67.86it/s]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# ---------------\n",
    "# Discussion Cell\n",
    "# ---------------\n",
    "\n",
    "num_runs = 200                    # The number of times we run the experiment\n",
    "num_steps = 1000                  # The number of pulls of each arm the agent takes\n",
    "env = ten_arm_env.Environment     # We set what environment we want to use to test\n",
    "agent = GreedyAgent               # We choose what agent we want to use\n",
    "agent_info = {\"num_actions\": 10}  # We pass the agent the information it needs. Here how many arms there are.\n",
    "env_info = {}                     # We pass the environment the information it needs. In this case nothing.\n",
    "\n",
    "rewards = np.zeros((num_runs, num_steps))\n",
    "average_best = 0\n",
    "for run in tqdm(range(num_runs)):           # tqdm is what creates the progress bar below\n",
    "    np.random.seed(run)\n",
    "    \n",
    "    rl_glue = RLGlue(env, agent)          # Creates a new RLGlue experiment with the env and agent we chose above\n",
    "    rl_glue.rl_init(agent_info, env_info) # We pass RLGlue what it needs to initialize the agent and environment\n",
    "    rl_glue.rl_start()                    # We start the experiment\n",
    "\n",
    "    average_best += np.max(rl_glue.environment.arms)\n",
    "    \n",
    "    for i in range(num_steps):\n",
    "        reward, _, action, _ = rl_glue.rl_step() # The environment and agent take a step and return\n",
    "                                                 # the reward, and action taken.\n",
    "        rewards[run, i] = reward\n",
    "\n",
    "greedy_scores = np.mean(rewards, axis=0)\n",
    "plt.figure(figsize=(15, 5), dpi= 80, facecolor='w', edgecolor='k')\n",
    "plt.plot([average_best / num_runs for _ in range(num_steps)], linestyle=\"--\")\n",
    "plt.plot(greedy_scores)\n",
    "plt.legend([\"Best Possible\", \"Greedy\"])\n",
    "plt.title(\"Average Reward of Greedy Agent\")\n",
    "plt.xlabel(\"Steps\")\n",
    "plt.ylabel(\"Average reward\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "6d222d49d1f2106fdc61c071b05133e3",
     "grade": false,
     "grade_id": "cell-5db366a4fb0be46e",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "How did our agent do? Is it possible for it to do better?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "e097e83bdc2cb91f5f54d2ed0a80c79e",
     "grade": false,
     "grade_id": "cell-ca7a4ae176f250d1",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "## Section 2: Epsilon-Greedy Agent"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "9130c5614d2ba27c32e5fe6173a54af7",
     "grade": false,
     "grade_id": "cell-04a8bd103b7af798",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "We learned about [another way for an agent to operate](https://www.coursera.org/learn/fundamentals-of-reinforcement-learning/lecture/tHDck/what-is-the-trade-off), where it does not always take the greedy action. Instead, sometimes it takes an exploratory action. It does this so that it can find out what the best action really is. If we always choose what we think is the current best action is, we may miss out on taking the true best action, because we haven't explored enough times to find that best action.\n",
    "\n",
    "Implement an epsilon-greedy agent below. Hint: we are implementing the algorithm from [section 2.4](http://www.incompleteideas.net/book/RLbook2018.pdf#page=52) of the textbook. You may want to use your greedy code from above and look at [np.random.random](https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.random.html), as well as [np.random.randint](https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.randint.html), to help you select random actions. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "d8598190c401a85561155c94f1b7e24d",
     "grade": false,
     "grade_id": "cell-6862cb5ef5702d22",
     "locked": false,
     "schema_version": 3,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "# -----------\n",
    "# Graded Cell\n",
    "# -----------\n",
    "class EpsilonGreedyAgent(main_agent.Agent):\n",
    "    def agent_step(self, reward, observation):\n",
    "        \"\"\"\n",
    "        Takes one step for the agent. It takes in a reward and observation and \n",
    "        returns the action the agent chooses at that time step.\n",
    "        \n",
    "        Arguments:\n",
    "        reward -- float, the reward the agent recieved from the environment after taking the last action.\n",
    "        observation -- float, the observed state the agent is in. Do not worry about this as you will not use it\n",
    "                              until future lessons\n",
    "        Returns:\n",
    "        current_action -- int, the action chosen by the agent at the current time step.\n",
    "        \"\"\"\n",
    "        \n",
    "        ### Useful Class Variables ###\n",
    "        # self.q_values : An array with what the agent believes each of the values of the arm are.\n",
    "        # self.arm_count : An array with a count of the number of times each arm has been pulled.\n",
    "        # self.last_action : The action that the agent took on the previous time step\n",
    "        # self.epsilon : The probability an epsilon greedy agent will explore (ranges between 0 and 1)\n",
    "        #######################\n",
    "        \n",
    "        # Update Q values - this should be the same update as your greedy agent above\n",
    "        # YOUR CODE HERE\n",
    "        self.arm_count[self.last_action] += 1\n",
    "        self.q_values[self.last_action] += (reward - self.q_values[self.last_action]) / self.arm_count[self.last_action]\n",
    "        \n",
    "        # Choose action using epsilon greedy\n",
    "        # Randomly choose a number between 0 and 1 and see if it's less than self.epsilon\n",
    "        # (hint: look at np.random.random()). If it is, set current_action to a random action.\n",
    "        # otherwise choose current_action greedily as you did above.\n",
    "        # YOUR CODE HERE\n",
    "        if np.random.random() < self.epsilon:\n",
    "            current_action = np.random.randint(len(self.q_values))\n",
    "        else:\n",
    "            current_action = argmax(self.q_values)\n",
    "        \n",
    "        self.last_action = current_action\n",
    "        \n",
    "        return current_action"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# --------------\n",
    "# Debugging Cell\n",
    "# --------------\n",
    "# Feel free to make any changes to this cell to debug your code\n",
    "\n",
    "# build a fake agent for testing and set some initial conditions\n",
    "np.random.seed(0)\n",
    "e_greedy_agent = EpsilonGreedyAgent()\n",
    "e_greedy_agent.q_values = [0, 0.0, 0.5, 0, 0]\n",
    "e_greedy_agent.arm_count = [0, 1, 0, 0, 0]\n",
    "e_greedy_agent.num_actions = 5\n",
    "e_greedy_agent.last_action = 1\n",
    "e_greedy_agent.epsilon = 0.5\n",
    "\n",
    "# given this random seed, we should see a greedy action (action 2) here\n",
    "action = e_greedy_agent.agent_step(reward=1, observation=0)\n",
    "\n",
    "# -----------------------------------------------\n",
    "# we'll try to guess a few of the trickier places\n",
    "# -----------------------------------------------\n",
    "\n",
    "# make sure to update for the *last_action* not the current action\n",
    "assert e_greedy_agent.q_values != [0, 0.5, 1.0, 0, 0], \"A\"\n",
    "\n",
    "# make sure the stepsize is based on the *last_action* not the current action\n",
    "assert e_greedy_agent.q_values != [0, 1, 0.5, 0, 0], \"B\"\n",
    "\n",
    "# make sure the agent is using the argmax that breaks ties randomly\n",
    "assert action == 2, \"C\"\n",
    "\n",
    "# -----------------------------------------------\n",
    "\n",
    "# let's see what happens for another action\n",
    "np.random.seed(1)\n",
    "e_greedy_agent = EpsilonGreedyAgent()\n",
    "e_greedy_agent.q_values = [0, 0.5, 0.5, 0, 0]\n",
    "e_greedy_agent.arm_count = [0, 1, 0, 0, 0]\n",
    "e_greedy_agent.num_actions = 5\n",
    "e_greedy_agent.last_action = 1\n",
    "e_greedy_agent.epsilon = 0.5\n",
    "\n",
    "# given this random seed, we should see a random action (action 4) here\n",
    "action = e_greedy_agent.agent_step(reward=1, observation=0)\n",
    "\n",
    "# The agent saw a reward of 1, so should increase the value for *last_action*\n",
    "assert e_greedy_agent.q_values == [0, 0.75, 0.5, 0, 0], \"D\"\n",
    "\n",
    "# the agent should have picked a random action for this particular random seed\n",
    "assert action == 4, \"E\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "e90fd67af1fe48141bd6d286262c4fca",
     "grade": true,
     "grade_id": "cell-3099aff70dfd2e61",
     "locked": true,
     "points": 10,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "# -----------\n",
    "# Tested Cell\n",
    "# -----------\n",
    "# The contents of the cell will be tested by the autograder.\n",
    "# If they do not pass here, they will not pass there.\n",
    "\n",
    "np.random.seed(0)\n",
    "e_greedy_agent = EpsilonGreedyAgent()\n",
    "e_greedy_agent.q_values = [0, 0, 1.0, 0, 0]\n",
    "e_greedy_agent.arm_count = [0, 1, 0, 0, 0]\n",
    "e_greedy_agent.num_actions = 5\n",
    "e_greedy_agent.last_action = 1\n",
    "e_greedy_agent.epsilon = 0.5\n",
    "action = e_greedy_agent.agent_step(reward=1, observation=0)\n",
    "\n",
    "assert e_greedy_agent.q_values == [0, 0.5, 1.0, 0, 0]\n",
    "\n",
    "# manipulate the random seed so the agent takes a random action\n",
    "np.random.seed(1)\n",
    "action = e_greedy_agent.agent_step(reward=0, observation=0)\n",
    "\n",
    "assert action == 4\n",
    "\n",
    "# check to make sure we update value for action 4\n",
    "action = e_greedy_agent.agent_step(reward=1, observation=0)\n",
    "assert e_greedy_agent.q_values == [0, 0.5, 0.0, 0, 1.0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "5488f20b68110a856dad3a003f51db32",
     "grade": false,
     "grade_id": "cell-762b0b3997c2300f",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "Now that we have our epsilon greedy agent created. Let's compare it against the greedy agent with epsilon of 0.1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "8ef12f07e52b4cb86feada569e684744",
     "grade": false,
     "grade_id": "cell-2f6cef9d3ecdace7",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 200/200 [00:02<00:00, 67.06it/s]\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA+EAAAFvCAYAAAAlnMpnAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAMTQAADE0B0s6tTgAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+j8jraAAAgAElEQVR4nOydd3gVxfrHv+k9AYzUSACjYEEEwev9ISBXmgVsXEG8CgLKVRQVxV5QbCB6FS/ca8WAiKFIF+kl9BAuEEoCIQQIpJGQfnLq+/vjMJvZPbsn54SEBHg/z8NDzu7s7Mzs7Oy8Zd7xISICwzAMwzAMwzAMwzB1jm99F4BhGIZhGIZhGIZhrhRYCGcYhmEYhmEYhmGYiwQL4QzDMAzDMAzDMAxzkWAhnGEYhmEYhmEYhmEuEiyEMwzDMAzDMAzDMMxFgoVwhmEYhmEYhmEYhrlIsBDOMAzDMAzDMAzDMBcJFsIZhmGYK5J//OMfGDFixAXlMXbsWDRp0gQ+Pj7IzMyslXLVNbVRb+bywmazwcfHBxs3bqzvojAMw1wRsBDOMAxTh/z888/w8/PDhx9+WN9FqTMmTpwIHx8f+Pj4ICAgANdeey0mTpwIh8NR30WrUzZv3ozvv/8eK1asQHZ2Nq655hrddAUFBRg/fjzi4uIQFBSEli1b4u6770ZCQsIl3Ub13bd/+OEHtGnTpl7uLRgxYoTS9+V/n332WbXXbt26FQMHDkR0dDRCQkLQvn17jBo1CgcPHrwIJa877rrrLvj7+9ebUurOO+/ExIkT6+XeDMMwnsJCOMMwTB0ya9YsvPTSS5g1a1ad3sdqtYKI6vQe7rj99tuRnZ2N48eP44svvsC//vUvzJgxo97KI2M2m+sk34yMDLRo0QJ//etf0bx5c/j5+bmkycvLQ7du3bB27VpMmTIFKSkpWLFiBUaMGIF//etfOHnypG7e9f08PeFi9e2GziOPPILs7GzVvxdeeMHtNQkJCbjrrrvQsmVLLFy4EIcOHcJ3332H1q1buxUg66ov1xYnTpxASkoKhg8fjtmzZ9d3cRiGYRouxDAMw9QJJ06coIiICCovL6d27dpRYmIiERHl5+eTv78/7dy5U5V+7NixdP/99yu/586dSzfccAMFBwfTTTfdRPPnz1fObdiwgQDQypUr6cYbbyQ/Pz/Kz8+nJUuW0F/+8hcKDw+nFi1a0LPPPktlZWXKdQ6HgyZMmEBRUVEUHR1NU6ZMoe7du9P777+vpMnLy6Nhw4ZRVFQUXXXVVTRs2DA6e/asYT3ff/996t69u+rYww8/TA8++KBHeS5cuJBat26tpP35558JAK1atYqIiGw2G4WHh9P27duJiOiTTz6hDh06UEhICMXFxdHXX3+tunevXr3olVdeodGjR1NERASNHTuWiIimTZtGTZs2pcjISBo/fjwNGzaMhg8fblgvq9VKEyZMoKuvvpqCg4OpT58+dOTIEaXOAJR/sbGxunmMHDmSYmNjyWQy6Z53OBxEZPw8y8vL6bnnnqPo6GiKioqi++67j44fP67K4+uvv6a2bdtSSEgIde3alTZs2KA6767eY8aMob///e+q9Onp6eTj40MZGRmGbWPUtwUmk4lGjBhBoaGhFBMTQ7NmzaJWrVrRzJkzlTTHjh2j+++/n8LCwqhFixY0duxYKi8vV87HxsbS1KlTafDgwRQaGkodOnSgdevWqdpL/qetNxHRuHHj6J577lEdy83NJT8/P9q9ezc5HA564403qGXLlhQUFERt27al//73v4b11jJ8+HB6/PHHPU5PRFRSUkKNGjWi1157Tfe86BMi/2HDhtHrr79OV111lTI+JCcnU69evSg4OJhiY2PpvffeI6vVqlxX3TtcVFREDz/8MAUHB9N1111HK1asUNrQZDJRo0aNaMWKFapyvfPOO9SrVy+3dfvwww9p5MiRtGnTJoqLi3M5v2fPHurcuTMFBQVR9+7d6bvvviPtVNSTcW/t2rV0ww03UHh4OD3wwANUWFiotJcn7yXDMEx9w0I4wzBMHTFp0iQaNmwYERG9+eabNHr0aOVcv379aPz48cpvu91OzZs3p9mzZxMR0bp16yg6OprmzZtHx44dozlz5lBISIgiiIrJ6B133EFbt26lQ4cOkdlspoSEBFq6dCkdO3aMNm3aRB06dKAJEyYo9/n+++8pMjKSFixYQAcPHqTBgwdTRESESgjv2bMnDRs2jPbv308pKSl077330oABAwzrqRXCU1JSqHnz5vToo496lGdeXh4BoBMnThAR0ahRo+iqq66id955h4iIkpKSKCQkhCwWCxERffHFF5SYmEgZGRmUkJBAYWFhKoGhV69eFB4eTp9++ikdPXqUMjIyaOPG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dPPNN9Njjz2mSrdkyRIKCgqiL7/8ktLS0mjv3r30zTff0G+//UZEVWsj5XWfNpuNGjduTM899xwdO3aMfvvtN2rVqpVqzeX3339PUVFR9Pvvv9OhQ4fo0UcfpYiICJo4cSIROYOJdevWjbp3706bN2+mY8eO0erVq1VrO7XoRUcvLS2lyMhI+v333z3Os1WrVuTn56esd543bx75+flRt27dlDR79uwhHx8fmjlzJh09epQmTZpEERERqqjN8ppfwfr168nf35++/fZbSk1NpbFjx1YbmO2TTz6hpk2b0ooVK+jAgQOqwGyiLatbk5yTk0OxsbF0880304IFCygtLY0OHjxIM2bMoJCQEJo1axYR6T9PImeU+RtvvJH+/PNPysjIoE2bNtHzzz+vRLqeNm0aRUVF0U8//UTp6emUlJREn376qRJF3NN6//bbbxQQEEDNmzdX6qeHp3377bffppiYGFq3bh3t27eP+vTpQ8HBwfTzzz8TkTNCeJs2bWjQoEG0a9cuOnr0KC1dupReeeUVJT/tWm4iIgC0Zs0apc0CAgIoKSmJ8vPzdcskePvtt+mmm24iX19fSktLU47//PPPNHPmTDp06BClpaXRY489Rrfeeqtyvn379vT7778b5jt8+HB65JFHlOBw4p+7tdNEzjXcfn5+NHr0aNq4cSMdP36cduzYQcOGDSNfX19V/trAbydPnqRGjRrR6NGjae/evZSamkoJCQlKHABP3rcnn3ySbrjhBtqxYwdt376dunXrphthfsCAARQQEECvvvqq2/rcc889yi4EMrt37yY/Pz86c+aMEpht6NChdOjQIVq4cKHL+FSTcW/mzJnUqlUrVZv16dOHsrKyVPEUGIZhGhIshDMMw9Qy9957r2HEZCEMCB555BECQIsXL3ZJ+/vvv1Pnzp0pMDCQoqOjqX///i5RgrVC2x9//EFxcXEUHBxMvXv3ph9//FE1ybXb7fTqq69SZGQkRUdH0+eff05dunShTz/9VElTUFBAI0eOpOjoaAoODqb27durIqxr0RPCiYheeOEFJWCSJ3kOHTqUgoODlSjXIrDZyy+/rEr3ySef0NVXX00RERE0atQoevXVV6sVwomIvvrqK+W6F1980estyu6++25lizIiz4RwImf09xdffJHatm1LAQEBFBkZSb169aKffvpJCbhl9DxNJhON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Vr9/a3uZ+3w6Y5Akaf3eY3pm9e4yt1VGfn6+zp49qyZNmrgfe/7557Vs2TLZbDa1atVKCxcuVFRUlFatWqVZs2YpKChINptNc+fO1bFjx7R9+3ZNmzZNs2fP1rPPPlui0Hqxxo0bq2/fvvrxxx913XXXadq0adq6daskaeTIkXryySclSc8884zefvtthYU5c6f3339fERERSktL03fffaeQkBC1bNlSn3zyidatW6cHH3xQ27df+Js9+OCD2rBhg3JzczV//nwNHjy4VCzbtm3Tww8/rNOnT8vhcGjWrFkaPnx4pf+G5fFqEh4VFaWcnBzZbDZZrVYZhqHs7GxFR0eX2vfMmTNKTk5WSkqKZsyY4X48LCxMERERkqSmTZtq3Lhxeuedd8pMwmfMmFHiuZGRkV54V9XPLkPBhiEFsTQBAAAAAPOMGDFCderUUUZGhnr37q0777xTkvTOO+9o79692rJli4KDg/XPf/5TU6ZM0fvvv6/Zs2frtddeU1JSkhwOh06fPq3GjRtryZIlevDBB/W73/2uwtfNycnRxo0b9cADD+jpp59WQUGBvv32W+Xl5WngwIHq0qWLbrjhBj3//PM6fPiw6tatq3PnzikoKEhr1qzRyZMn3ZOAnzhxoszXOH78uLp3767nn39eX375pYYOHVpq0u9Tp05p0qRJ+vDDD9W6dWv9+uuv6t27twYMGKBWrVpV8a/r5NWsLyIiQomJiVqyZInS0tK0YsUKxcTEKCYmpsR+ubm5Sk5O1s0336zHH3+8xLajR4+qSZMmCgkJUX5+vt577z0lJiZ6M2yfs0uyWoIklicAAAAAaq2KKtYxzetVuM+g+BYadBmVb5fly5erW7dustlsmjRpkh5++GG98MILWrlypbZv367evXtLkux2u4KDgyVJ119/vaZPn64RI0bopptuUkJCgsev56qUh4SE6PHHH9d1112nBx98UC+99JKCgoJUr1493XPPPfrvf/+rYcOGKS4uTqmpqbrpppt06623KjIyUj179tSePXs0efJkDRo0qNyKe2hoqMaOHStJ6t+/v1q1aqWdO3eqTZs27n02b96sgwcP6pZbbnE/ZhiGfvzxx2pLwr2+RNnChQu1cOFCxcfH67nnntMbb7whSZowYYI++OADSdJLL72krVu36j//+Y97GbK5c+dKkjZu3KjExET17NlT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MSUq4c8++6wcDodmz54tSXr66af166+/6qWXXlJaWpp27NihzZs3q27durrjjjs0cOBAzZw5U40aNdIPP/ygNm3aqLCwUPn5+apfv76ZbxsAAL9GJRwAgAAVFBSkFStWaPPmzUpOTtamTZvUtWtX7d+/v9S+K1eu1JIlS5SQkKCEhAQtXbpUBw8edG8fNWqU6tevr+DgYI0bN07//e9/JUmDBw/WPffco5deekkZGRkk4AAAVMBqdgAAAMC7OnfurM6dO2vSpElKTk7WBx98UGofwzC0YMECDR482KNjWiwWSc6J377++mutW7dOQ4YM0TPPPKPRo0dXa/wAAAQSKuEAAASoQ4cOadOmTe77J0+eVEZGhjp06KCGDRvqt99+c29LSUnRvHnzdO7cOUnSuXPntGvXLvf2f//73zp79qzsdrvefPNN3XDDDbLZbDpw4ID69OmjBx98UCNGjNDWrVt99wYBAKiBqIQDABCgbDabnnrqKWVkZCg8PFw2m0333nuvbr/9dh07dkz33XefwsPDtWjRIj3yyCOaM2eOrrzySneV++GHH1bXrl0lSddcc42GDh2q7Oxs9e/fX1OnTpXdbtd9992nkydPymq1qkWLFnrzzTfNfMsAAPg9JmYDAACXlJaWpj59+mjKlClmhwIAQI1Hd3QAAAAAAHyESjgAAAAAAD5CJRwAAAAAAB8hCQcAAAAAwEdIwgEAAAAA8BGScAAAAAAAfIQkHAAAAAAAHyEJBwAAAADAR/4/P16asocmD5sAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 1200x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# ---------------\n",
    "# Discussion Cell\n",
    "# ---------------\n",
    "\n",
    "# Plot Epsilon greedy results and greedy results\n",
    "num_runs = 200\n",
    "num_steps = 1000\n",
    "epsilon = 0.1\n",
    "agent = EpsilonGreedyAgent\n",
    "env = ten_arm_env.Environment\n",
    "agent_info = {\"num_actions\": 10, \"epsilon\": epsilon}\n",
    "env_info = {}\n",
    "all_rewards = np.zeros((num_runs, num_steps))\n",
    "\n",
    "for run in tqdm(range(num_runs)):\n",
    "    np.random.seed(run)\n",
    "    \n",
    "    rl_glue = RLGlue(env, agent)\n",
    "    rl_glue.rl_init(agent_info, env_info)\n",
    "    rl_glue.rl_start()\n",
    "\n",
    "    for i in range(num_steps):\n",
    "        reward, _, action, _ = rl_glue.rl_step() # The environment and agent take a step and return\n",
    "                                                 # the reward, and action taken.\n",
    "        all_rewards[run, i] = reward\n",
    "\n",
    "# take the mean over runs\n",
    "scores = np.mean(all_rewards, axis=0)\n",
    "plt.figure(figsize=(15, 5), dpi= 80, facecolor='w', edgecolor='k')\n",
    "plt.plot([1.55 for _ in range(num_steps)], linestyle=\"--\")\n",
    "plt.plot(greedy_scores)\n",
    "plt.title(\"Average Reward of Greedy Agent vs. E-Greedy Agent\")\n",
    "plt.plot(scores)\n",
    "plt.legend((\"Best Possible\", \"Greedy\", \"Epsilon: 0.1\"))\n",
    "plt.xlabel(\"Steps\")\n",
    "plt.ylabel(\"Average reward\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "ed0fa5039cf69237a1caf29b273b2942",
     "grade": false,
     "grade_id": "cell-23cf04f952075345",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "Notice how much better the epsilon-greedy agent did. Because we occasionally choose a random action we were able to find a better long term policy. By acting greedily before our value estimates are accurate, we risk settling on a suboptimal action."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "6057919769dc2349ccb835468c218ff2",
     "grade": false,
     "grade_id": "cell-edb9184608392c62",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "## Section 2.1 Averaging Multiple Runs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "59ccf3700eaea50455db9fdc37191864",
     "grade": false,
     "grade_id": "cell-1b55f263f08b1389",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "Did you notice that we averaged over 200 runs? Why did we do that?\n",
    "\n",
    "To get some insight, let's look at the results of two individual runs by the same agent."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "9896340e89e8cd11bb0a90ef048e9084",
     "grade": false,
     "grade_id": "cell-69d62e83fc1d91bc",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# ---------------\n",
    "# Discussion Cell\n",
    "# ---------------\n",
    "\n",
    "# Plot runs of e-greedy agent\n",
    "agent = EpsilonGreedyAgent\n",
    "env = ten_arm_env.Environment\n",
    "agent_info = {\"num_actions\": 10, \"epsilon\": 0.1}\n",
    "env_info = {}\n",
    "all_averages = []\n",
    "plt.figure(figsize=(15, 5), dpi= 80, facecolor='w', edgecolor='k')\n",
    "num_steps = 1000\n",
    "\n",
    "for run in (0, 1):\n",
    "    np.random.seed(run) # Here we set the seed so that we can compare two different runs\n",
    "    averages = []\n",
    "    rl_glue = RLGlue(env, agent)\n",
    "    rl_glue.rl_init(agent_info, env_info)\n",
    "    rl_glue.rl_start()\n",
    "\n",
    "    scores = [0]\n",
    "    for i in range(num_steps):\n",
    "        reward, state, action, is_terminal = rl_glue.rl_step()\n",
    "        scores.append(scores[-1] + reward)\n",
    "        averages.append(scores[-1] / (i + 1))\n",
    "    \n",
    "    plt.plot(averages)\n",
    "\n",
    "plt.title(\"Comparing two independent runs\")\n",
    "plt.xlabel(\"Steps\")\n",
    "plt.ylabel(\"Average reward\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "9c6b5d4ea841a388245eb1fdc732a3ed",
     "grade": false,
     "grade_id": "cell-cbabc6468847faab",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "Notice how the two runs were different? But, if this is the exact same algorithm, why does it behave differently in these two runs?\n",
    "\n",
    "The answer is that it is due to randomness in the environment and in the agent. Depending on what action the agent randomly starts with, or when it randomly chooses to explore, it can change the results of the runs. And even if the agent chooses the same action, the reward from the environment is randomly sampled from a Gaussian. The agent could get lucky, and see larger rewards for the best action early on and so settle on the best action faster. Or, it could get unlucky and see smaller rewards for best action early on and so take longer to recognize that it is in fact the best action.\n",
    "\n",
    "To be more concrete, letâ€™s look at how many times an exploratory action is taken, for different seeds. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "27f087a7a6f92b6ba2461d66dfc64779",
     "grade": false,
     "grade_id": "cell-a6e9ef699d799240",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Seed 1\n",
      "Exploratory Action\n",
      "Exploratory Action\n",
      "Exploratory Action\n",
      "\n",
      "\n",
      "Random Seed 2\n",
      "Exploratory Action\n"
     ]
    }
   ],
   "source": [
    "# ---------------\n",
    "# Discussion Cell\n",
    "# ---------------\n",
    "print(\"Random Seed 1\")\n",
    "np.random.seed(1)\n",
    "for _ in range(15):\n",
    "    if np.random.random() < 0.1:\n",
    "        print(\"Exploratory Action\")\n",
    "    \n",
    "\n",
    "print()\n",
    "print()\n",
    "\n",
    "print(\"Random Seed 2\")\n",
    "np.random.seed(2)\n",
    "for _ in range(15):\n",
    "    if np.random.random() < 0.1:\n",
    "        print(\"Exploratory Action\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "bc8ff22ac82750f9eb3e0f901d5f4166",
     "grade": false,
     "grade_id": "cell-42f5c9cb11fffbb0",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "With the first seed, we take an exploratory action three times out of 15, but with the second, we only take an exploratory action once. This can significantly affect the performance of our agent because the amount of exploration has changed significantly.\n",
    "\n",
    "To compare algorithms, we therefore report performance averaged across many runs. We do this to ensure that we are not simply reporting a result that is due to stochasticity, as explained [in the lectures](https://www.coursera.org/learn/fundamentals-of-reinforcement-learning/lecture/PtVBs/sequential-decision-making-with-evaluative-feedback). Rather, we want statistically significant outcomes. We will not use statistical significance tests in this course. Instead, because we have access to simulators for our experiments, we use the simpler strategy of running for a large number of runs and ensuring that the confidence intervals do not overlap. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "65cc408096713cec77d263be0fd90b0d",
     "grade": false,
     "grade_id": "cell-1d4132f4b28f4881",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "## Section 3: Comparing values of epsilon"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "81b41ca2616b4d370e19c911cf4ab88e",
     "grade": false,
     "grade_id": "cell-f62fa977aac5da68",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "Can we do better than an epsilon of 0.1? Let's try several different values for epsilon and see how they perform. We try different settings of key performance parameters to understand how the agent might perform under different conditions.\n",
    "\n",
    "Below we run an experiment where we sweep over different values for epsilon:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "e1e772b65c6e29c699f2fb141c37df73",
     "grade": false,
     "grade_id": "cell-4c9881740ba46656",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 200/200 [00:03<00:00, 59.57it/s]\n",
      "100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 200/200 [00:03<00:00, 60.15it/s]\n",
      "100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 200/200 [00:03<00:00, 62.37it/s]\n",
      "100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 200/200 [00:02<00:00, 72.62it/s]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# ---------------\n",
    "# Discussion Cell\n",
    "# ---------------\n",
    "\n",
    "# Experiment code for different e-greedy\n",
    "epsilons = [0.0, 0.01, 0.1, 0.4]\n",
    "\n",
    "plt.figure(figsize=(15, 5), dpi= 80, facecolor='w', edgecolor='k')\n",
    "plt.plot([1.55 for _ in range(num_steps)], linestyle=\"--\")\n",
    "\n",
    "n_q_values = []\n",
    "n_averages = []\n",
    "n_best_actions = []\n",
    "\n",
    "num_runs = 200\n",
    "\n",
    "for epsilon in epsilons:\n",
    "    all_averages = []\n",
    "    for run in tqdm(range(num_runs)):\n",
    "        agent = EpsilonGreedyAgent\n",
    "        agent_info = {\"num_actions\": 10, \"epsilon\": epsilon}\n",
    "        env_info = {\"random_seed\": run}\n",
    "\n",
    "        rl_glue = RLGlue(env, agent)\n",
    "        rl_glue.rl_init(agent_info, env_info)\n",
    "        rl_glue.rl_start()\n",
    "        \n",
    "        best_arm = np.argmax(rl_glue.environment.arms)\n",
    "\n",
    "        scores = [0]\n",
    "        averages = []\n",
    "        best_action_chosen = []\n",
    "        \n",
    "        for i in range(num_steps):\n",
    "            reward, state, action, is_terminal = rl_glue.rl_step()\n",
    "            scores.append(scores[-1] + reward)\n",
    "            averages.append(scores[-1] / (i + 1))\n",
    "            if action == best_arm:\n",
    "                best_action_chosen.append(1)\n",
    "            else:\n",
    "                best_action_chosen.append(0)\n",
    "            if epsilon == 0.1 and run == 0:\n",
    "                n_q_values.append(np.copy(rl_glue.agent.q_values))\n",
    "        if epsilon == 0.1:\n",
    "            n_averages.append(averages)\n",
    "            n_best_actions.append(best_action_chosen)\n",
    "        all_averages.append(averages)\n",
    "        \n",
    "    plt.plot(np.mean(all_averages, axis=0))\n",
    "\n",
    "plt.legend([\"Best Possible\"] + epsilons)\n",
    "plt.xlabel(\"Steps\")\n",
    "plt.ylabel(\"Average reward\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "621e4edf3ee0456e562f8f61899fafd8",
     "grade": false,
     "grade_id": "cell-1763c2a2a2863158",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "Why did 0.1 perform better than 0.01?\n",
    "\n",
    "If exploration helps why did 0.4 perform worse that 0.0 (the greedy agent)?\n",
    "\n",
    "Think about these and how you would answer these questions. They are questions in the practice quiz. If you still have questions about it, retake the practice quiz."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "4107b76e0b504556e7760f38c7c603b2",
     "grade": false,
     "grade_id": "cell-7f65b4e031a22732",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "## Section 4: The Effect of Step Size"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "dacfdaab4566f744379cf2b63aa38125",
     "grade": false,
     "grade_id": "cell-a12e885539decec6",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "In Section 1 of this assignment, we decayed the step size over time based on action-selection counts. The step-size was 1/N(A), where N(A) is the number of times action A was selected. This is the same as computing a sample average. We could also set the step size to be a constant value, such as 0.1. What would be the effect of doing that? And is it better to use a constant or the sample average method? \n",
    "\n",
    "To investigate this question, letâ€™s start by creating a new agent that has a constant step size. This will be nearly identical to the agent created above. You will use the same code to select the epsilon-greedy action. You will change the update to have a constant step size instead of using the 1/N(A) update."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "706014b629a7e271074f562e910272ae",
     "grade": false,
     "grade_id": "cell-fe26903228ef0c50",
     "locked": false,
     "schema_version": 3,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "# -----------\n",
    "# Graded Cell\n",
    "# -----------\n",
    "class EpsilonGreedyAgentConstantStepsize(main_agent.Agent):\n",
    "    def agent_step(self, reward, observation):\n",
    "        \"\"\"\n",
    "        Takes one step for the agent. It takes in a reward and observation and \n",
    "        returns the action the agent chooses at that time step.\n",
    "        \n",
    "        Arguments:\n",
    "        reward -- float, the reward the agent recieved from the environment after taking the last action.\n",
    "        observation -- float, the observed state the agent is in. Do not worry about this as you will not use it\n",
    "                              until future lessons\n",
    "        Returns:\n",
    "        current_action -- int, the action chosen by the agent at the current time step.\n",
    "        \"\"\"\n",
    "        \n",
    "        ### Useful Class Variables ###\n",
    "        # self.q_values : An array with what the agent believes each of the values of the arm are.\n",
    "        # self.arm_count : An array with a count of the number of times each arm has been pulled.\n",
    "        # self.last_action : An int of the action that the agent took on the previous time step.\n",
    "        # self.step_size : A float which is the current step size for the agent.\n",
    "        # self.epsilon : The probability an epsilon greedy agent will explore (ranges between 0 and 1)\n",
    "        #######################\n",
    "        \n",
    "        # Update q_values for action taken at previous time step \n",
    "        # using self.step_size intead of using self.arm_count\n",
    "        # YOUR CODE HERE\n",
    "        raise NotImplementedError()\n",
    "        \n",
    "        # Choose action using epsilon greedy. This is the same as you implemented above.\n",
    "        # YOUR CODE HERE\n",
    "        raise NotImplementedError()\n",
    "        \n",
    "        self.last_action = current_action\n",
    "        \n",
    "        return current_action"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# --------------\n",
    "# Debugging Cell\n",
    "# --------------\n",
    "# Feel free to make any changes to this cell to debug your code\n",
    "\n",
    "for step_size in [0.01, 0.1, 0.5, 1.0]:\n",
    "    e_greedy_agent = EpsilonGreedyAgentConstantStepsize()\n",
    "    e_greedy_agent.q_values = [0, 0, 1.0, 0, 0]\n",
    "    e_greedy_agent.num_actions = 5\n",
    "    e_greedy_agent.last_action = 1\n",
    "    e_greedy_agent.epsilon = 0.0\n",
    "    e_greedy_agent.step_size = step_size\n",
    "    action = e_greedy_agent.agent_step(1, 0)\n",
    "    assert e_greedy_agent.q_values == [0, step_size, 1.0, 0, 0], \"Check that you are updating q_values correctly using the stepsize.\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "ea1160cbc12cb030918b93b5b5f8bb80",
     "grade": true,
     "grade_id": "cell-ba6bdf28928e3042",
     "locked": true,
     "points": 10,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "# -----------\n",
    "# Tested Cell\n",
    "# -----------\n",
    "# The contents of the cell will be tested by the autograder.\n",
    "# If they do not pass here, they will not pass there.\n",
    "\n",
    "np.random.seed(0)\n",
    "# Check Epsilon Greedy with Different Constant Stepsizes\n",
    "for step_size in [0.01, 0.1, 0.5, 1.0]:\n",
    "    e_greedy_agent = EpsilonGreedyAgentConstantStepsize()\n",
    "    e_greedy_agent.q_values = [0, 0, 1.0, 0, 0]\n",
    "    e_greedy_agent.num_actions = 5\n",
    "    e_greedy_agent.last_action = 1\n",
    "    e_greedy_agent.epsilon = 0.0\n",
    "    e_greedy_agent.step_size = step_size\n",
    "    \n",
    "    action = e_greedy_agent.agent_step(1, 0)\n",
    "    \n",
    "    assert e_greedy_agent.q_values == [0, step_size, 1.0, 0, 0]    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "bef121f61b9cf786c92f5bd2af961cb9",
     "grade": false,
     "grade_id": "cell-a5d327f4d52578e6",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "# ---------------\n",
    "# Discussion Cell\n",
    "# ---------------\n",
    "\n",
    "# Experiment code for different step sizes\n",
    "step_sizes = [0.01, 0.1, 0.5, 1.0, '1/N(A)']\n",
    "\n",
    "epsilon = 0.1\n",
    "num_steps = 1000\n",
    "num_runs = 200\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(15, 5), dpi= 80, facecolor='w', edgecolor='k')\n",
    "\n",
    "q_values = {step_size: [] for step_size in step_sizes}\n",
    "true_values = {step_size: None for step_size in step_sizes}\n",
    "best_actions = {step_size: [] for step_size in step_sizes}\n",
    "\n",
    "for step_size in step_sizes:\n",
    "    all_averages = []\n",
    "    for run in tqdm(range(num_runs)):\n",
    "        np.random.seed(run)\n",
    "        agent = EpsilonGreedyAgentConstantStepsize if step_size != '1/N(A)' else EpsilonGreedyAgent\n",
    "        agent_info = {\"num_actions\": 10, \"epsilon\": epsilon, \"step_size\": step_size, \"initial_value\": 0.0}\n",
    "        env_info = {}\n",
    "\n",
    "        rl_glue = RLGlue(env, agent)\n",
    "        rl_glue.rl_init(agent_info, env_info)\n",
    "        rl_glue.rl_start()\n",
    "        \n",
    "        best_arm = np.argmax(rl_glue.environment.arms)\n",
    "\n",
    "        if run == 0:\n",
    "            true_values[step_size] = np.copy(rl_glue.environment.arms)\n",
    "            \n",
    "        best_action_chosen = []\n",
    "        for i in range(num_steps):\n",
    "            reward, state, action, is_terminal = rl_glue.rl_step()\n",
    "            if action == best_arm:\n",
    "                best_action_chosen.append(1)\n",
    "            else:\n",
    "                best_action_chosen.append(0)\n",
    "            if run == 0:\n",
    "                q_values[step_size].append(np.copy(rl_glue.agent.q_values))\n",
    "        best_actions[step_size].append(best_action_chosen)\n",
    "    ax.plot(np.mean(best_actions[step_size], axis=0))\n",
    "\n",
    "plt.legend(step_sizes)\n",
    "plt.title(\"% Best Arm Pulled\")\n",
    "plt.xlabel(\"Steps\")\n",
    "plt.ylabel(\"% Best Arm Pulled\")\n",
    "vals = ax.get_yticks()\n",
    "ax.set_yticklabels(['{:,.2%}'.format(x) for x in vals])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "4490c3113b9b460e79a0f92ae6fb2433",
     "grade": false,
     "grade_id": "cell-6704fdb6f4f612fb",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "Notice first that we are now plotting the amount of time that the best action is taken rather than the average reward. To better  understand the performance of an agent, it can be useful to measure specific behaviors, beyond just how much reward is accumulated. This measure indicates how close the agentâ€™s behaviour is to optimal.\n",
    "\n",
    "It seems as though 1/N(A) performed better than the others, in that it reaches a solution where it takes the best action most frequently. Now why might this be? Why did a step size of 0.5 start out better but end up performing worse? Why did a step size of 0.01 perform so poorly?\n",
    "\n",
    "Let's dig into this further below. Letâ€™s plot how well each agent tracks the true value, where each agent has a different step size method. You do not have to enter any code here, just follow along."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "c9192f306586b80bc3cf978e3a99d6c0",
     "grade": false,
     "grade_id": "cell-cd92b14ec8825d38",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# ---------------\n",
    "# Discussion Cell\n",
    "# ---------------\n",
    "largest = 0\n",
    "num_steps = 1000\n",
    "for step_size in step_sizes:\n",
    "    plt.figure(figsize=(15, 5), dpi= 80, facecolor='w', edgecolor='k')\n",
    "    largest = np.argmax(true_values[step_size])\n",
    "    plt.plot([true_values[step_size][largest] for _ in range(num_steps)], linestyle=\"--\")\n",
    "    plt.title(\"Step Size: {}\".format(step_size))\n",
    "    plt.plot(np.array(q_values[step_size])[:, largest])\n",
    "    plt.legend([\"True Expected Value\", \"Estimated Value\"])\n",
    "    plt.xlabel(\"Steps\")\n",
    "    plt.ylabel(\"Value\")\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "f0ecb1029a80a609aa9e18b280572f82",
     "grade": false,
     "grade_id": "cell-a0948edb96aacc70",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "These plots help clarify the performance differences between the different step sizes. A step size of 0.01 makes such small updates that the agentâ€™s value estimate of the best action does not get close to the actual value. Step sizes of 0.5 and 1.0 both get close to the true value quickly, but are very susceptible to stochasticity in the rewards. The updates overcorrect too much towards recent rewards, and so oscillate around the true value. This means that on many steps, the action that pulls the best arm may seem worse than it actually is.  A step size of 0.1 updates fairly quickly to the true value, and does not oscillate as widely around the true values as 0.5 and 1.0. This is one of the reasons that 0.1 performs quite well. Finally we see why 1/N(A) performed well. Early on while the step size is still reasonably high it moves quickly to the true expected value, but as it gets pulled more its step size is reduced which makes it less susceptible to the stochasticity of the rewards.\n",
    "\n",
    "Does this mean that 1/N(A) is always the best? When might it not be? One possible setting where it might not be as effective is in non-stationary problems. You learned about non-stationarity in the lessons. Non-stationarity means that the environment may change over time. This could manifest itself as continual change over time of the environment, or a sudden change in the environment.\n",
    "\n",
    "Let's look at how a sudden change in the reward distributions affects a step size like 1/N(A). This time we will run the environment for 2000 steps, and after 1000 steps we will randomly change the expected value of all of the arms. We compare two agents, both using epsilon-greedy with epsilon = 0.1. One uses a constant step size of 0.1, the other a step size of 1/N(A) that reduces over time. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "dc74515dbd1d5cfcc42cf19e143fe184",
     "grade": false,
     "grade_id": "cell-c42646d71c5cfa9d",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "4db5be8e659415ba13ceb258c9b1ceb9",
     "grade": false,
     "grade_id": "cell-55536f4ac923ab96",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "# ---------------\n",
    "# Discussion Cell\n",
    "# ---------------\n",
    "epsilon = 0.1\n",
    "num_steps = 2000\n",
    "num_runs = 500\n",
    "step_size = 0.1\n",
    "\n",
    "plt.figure(figsize=(15, 5), dpi= 80, facecolor='w', edgecolor='k')\n",
    "plt.plot([1.55 for _ in range(num_steps)], linestyle=\"--\")\n",
    "\n",
    "for agent in [EpsilonGreedyAgent, EpsilonGreedyAgentConstantStepsize]:\n",
    "    rewards = np.zeros((num_runs, num_steps))\n",
    "    for run in tqdm(range(num_runs)):\n",
    "        agent_info = {\"num_actions\": 10, \"epsilon\": epsilon, \"step_size\": step_size}\n",
    "        np.random.seed(run)\n",
    "        \n",
    "        rl_glue = RLGlue(env, agent)\n",
    "        rl_glue.rl_init(agent_info, env_info)\n",
    "        rl_glue.rl_start()\n",
    "\n",
    "        for i in range(num_steps):\n",
    "            reward, state, action, is_terminal = rl_glue.rl_step()\n",
    "            rewards[run, i] = reward\n",
    "            if i == 1000:\n",
    "                rl_glue.environment.arms = np.random.randn(10)\n",
    "        \n",
    "    plt.plot(np.mean(rewards, axis=0))\n",
    "plt.legend([\"Best Possible\", \"1/N(A)\", \"0.1\"])\n",
    "plt.xlabel(\"Steps\")\n",
    "plt.ylabel(\"Average reward\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "714c6cad23e3d8fe31496ffbe8674620",
     "grade": false,
     "grade_id": "cell-c4a8be88bbcc9b38",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "Now the agent with a step size of 1/N(A) performed better at the start but then performed worse when the environment changed! What happened?\n",
    "\n",
    "Think about what the step size would be after 1000 steps. Let's say the best action gets chosen 500 times. That means the step size for that action is 1/500 or 0.002. At each step when we update the value of the action and the value is going to move only 0.002 * the error. That is a very tiny adjustment and it will take a long time for it to get to the true value.\n",
    "\n",
    "The agent with step size 0.1, however, will always update in 1/10th of the direction of the error. This means that on average it will take ten steps for it to update its value to the sample mean.\n",
    "\n",
    "These are the types of tradeoffs we have to think about in reinforcement learning. A larger step size moves us more quickly toward the true value, but can make our estimated values oscillate around the expected value. A step size that reduces over time can converge to close to the expected value, without oscillating. On the other hand, such a decaying stepsize is not able to adapt to changes in the environment. Nonstationarity---and the related concept of partial observability---is a common feature of reinforcement learning problems and when learning online.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "ad81a549755ccc9ecbfaee839092688a",
     "grade": false,
     "grade_id": "cell-81f8c56a5fa91ecb",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "## Section 5: Conclusion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "3c335943267e235b3001c228e4bf9ba3",
     "grade": false,
     "grade_id": "cell-3c25a546a3d44e22",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "Great work! You have:\n",
    "- Implemented your first agent\n",
    "- Learned about the effect of epsilon, an exploration parameter, on the performance of an agent\n",
    "- Learned about the effect of step size on the performance of the agent\n",
    "- Learned about a good experiment practice of averaging across multiple runs"
   ]
  }
 ],
 "metadata": {
  "@webio": {
   "lastCommId": null,
   "lastKernelId": null
  },
  "coursera": {
   "course_slug": "fundamentals-of-reinforcement-learning",
   "graded_item_id": "QpLYg",
   "launcher_item_id": "9ldtk"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
